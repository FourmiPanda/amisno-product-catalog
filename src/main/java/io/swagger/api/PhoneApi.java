/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.Phone;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-10-18T10:50:13.013Z")

@Api(value = "phone", description = "the phone API")
@RequestMapping(value = "/v2")
@CrossOrigin(origins = "*")
public interface PhoneApi {

    @ApiOperation(value = "Add a new phone to the store", nickname = "addPhone", notes = "", tags = {"phone",})
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/phone",
            produces = {"application/xml", "application/json"},
            consumes = {"application/json", "application/xml"},
            method = RequestMethod.POST)
    ResponseEntity<Phone> addPhone(@ApiParam(value = "Phone object that needs to be added to the store", required = true) @Valid @RequestBody Phone body);


    @ApiOperation(value = "Deletes a phone", nickname = "deletePhone", notes = "", tags = {"phone",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Phone not found")})
    @RequestMapping(value = "/phone/{phoneId}",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Phone> deletePhone(@ApiParam(value = "Phone id to delete", required = true) @PathVariable("phoneId") Long phoneId, @ApiParam(value = "") @RequestHeader(value = "api_key", required = false) String apiKey);


    @ApiOperation(value = "Get all phones", nickname = "listPhone", notes = "Returns all phone", response = Phone.class, tags = {"phone",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Phone.class),})
    @RequestMapping(value = "/phone",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Phone>> listPhones();


    @ApiOperation(value = "Find phone by ID", nickname = "getPhoneById", notes = "Returns a single phone", response = Phone.class, tags = {"phone",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Phone.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Phone not found")})
    @RequestMapping(value = "/phone/{phoneId}",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Phone> getPhoneById(@ApiParam(value = "ID of phone to return", required = true) @PathVariable("phoneId") Long phoneId);


    @ApiOperation(value = "Update an existing phone", nickname = "updatePhone", notes = "", tags = {"phone",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Phone not found"),
            @ApiResponse(code = 405, message = "Validation exception")})
    @RequestMapping(value = "/phone",
            produces = {"application/xml", "application/json"},
            consumes = {"application/json", "application/xml"},
            method = RequestMethod.PUT)
    ResponseEntity<Phone> updatePhone(@ApiParam(value = "Phone object that needs to be added to the store", required = true) @Valid @RequestBody Phone body);


    @ApiOperation(value = "Updates a phone in the store with form data", nickname = "updatePhoneWithForm", notes = "", tags = {"phone",})
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/phone/{phoneId}",
            produces = {"application/xml", "application/json"},
            consumes = {"application/x-www-form-urlencoded"},
            method = RequestMethod.POST)
    ResponseEntity<Phone> updatePhoneWithForm(
            @ApiParam(value = "ID of phone that needs to be updated", required = true)
            @PathVariable("phoneId")
                    Long phoneId,
            @ApiParam(value = "Updated name of the phone")
            @RequestParam(value = "name", required = false)
                    String name,
            @ApiParam(value = "Updated name of the phone")
            @RequestParam(value = "status", required = false)
                    String status,
            @ApiParam(value = "Updated status of the phone")
            @RequestParam(value = "price", required = false)
                    Float price,
            @ApiParam(value = "Updated status of the phone")
            @RequestParam(value = "img", required = false)
                    String img);

}
